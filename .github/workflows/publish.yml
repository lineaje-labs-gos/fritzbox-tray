name: Publish Workflow
permissions:
  contents: read

on:
  push:
    tag:
      - v* 
  workflow_dispatch:
    inputs:
      release_version:
        description:  Provide the tag to publish the package
        required: false
      fixed_cves:
        description:  Provide the list of CVEs fixed by this version
        required: false

jobs:
  build_test:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '' }}

    steps:

      - name: Check out code
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.event.inputs.release_version }}
          submodules: true

      - name: Install JFrog CLI
        run: curl -fL https://install-cli.jfrog.io | sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.12
            3.11
            3.10

      - name: Upgrade pip and install core tools
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel twine

      - name: Configure pip to use Artifactory
        run: |
          mkdir -p ~/.config/pip
          cat > ~/.config/pip/pip.conf <<EOF
          [global]
          extra-index-url = https://${{ secrets.CUSTOMER_ZERO_USERNAME }}:${{ secrets.CUSTOMER_ZERO_TOKEN }}@${{ secrets.JFROG_HOST_NAME }}/artifactory/api/pypi/${{ secrets.PYPI_GOS_ALL_ARTIFACTORY }}/simple
          trusted-host = ${{ secrets.JFROG_HOST_NAME }}
          EOF

      - name: Detect and install project dependencies
        run: |
          if [ -f pyproject.toml ]; then
            echo "Detected pyproject.toml"
            # poetry and flit support is yet to be added
            # Default to PEP 517 build backend
            pip install -e .
          elif [ -f requirements.txt ]; then
            echo "Detected requirements.txt"
            pip install -r requirements.txt
          elif [ -f setup.py ]; then
            echo "Detected setup.py"
            pip install -e .
          else
            echo "No recognizable dependency file found!"
          fi
 
      - name: Detect and run tests
        run: |
          echo "Detecting test framework..."
          pip install pytest tox || true
          
          if [ -f tox.ini ] || grep -q '\[tool.tox\]' pyproject.toml 2>/dev/null; then
            echo "Running tests with tox..."
            tox || echo "tox tests failed or not configured correctly"
          
          elif [ -f pytest.ini ] || [ -d tests ] || grep -q '\[tool.pytest.ini_options\]' pyproject.toml 2>/dev/null; then
            echo "Running tests with pytest..."
            pytest -v || echo "pytest tests failed"
          
          elif find . -type f -name "test_*.py" | grep -q .; then
            echo "Running tests with unittest..."
            python -m unittest discover -s . -p "test_*.py" || echo "unittest tests failed"
          
          else
            echo "No tests detected; skipping test stage"
          fi

  publish:
    needs: build_test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.event.inputs.release_version }}
          submodules: true
      
      - name: Install JFrog CLI
        run: curl -fL https://install-cli.jfrog.io | sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.12
            3.11
            3.10

      - name: Upgrade pip and install core tools
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel twine

      - name: Configure pip to use Artifactory
        run: |
          mkdir -p ~/.config/pip
          cat > ~/.config/pip/pip.conf <<EOF
          [global]
          extra-index-url = https://${{ secrets.CUSTOMER_ZERO_USERNAME }}:${{ secrets.CUSTOMER_ZERO_TOKEN }}@${{ secrets.JFROG_HOST_NAME }}/artifactory/api/pypi/${{ secrets.PYPI_GOS_ALL_ARTIFACTORY }}/simple
          trusted-host = ${{ secrets.JFROG_HOST_NAME }}
          EOF

      - name: Detect and install project dependencies
        run: |
          if [ -f pyproject.toml ]; then
            echo "Detected pyproject.toml"
            # poetry and flit support is yet to be added
            # Default to PEP 517 build backend
            pip install -e .
          elif [ -f requirements.txt ]; then
            echo "Detected requirements.txt"
            pip install -r requirements.txt
          elif [ -f setup.py ]; then
            echo "Detected setup.py"
            pip install -e .
          else
            echo "No recognizable dependency file found!"
          fi

      - name: Build package
        run: |
          if [ -f requirements.txt ]; then
            # Packaging is executed inside a venv. Include requirements.txt as setup.py may refer to it
            echo "Updated MANIFEST.in for requirements.txt"
            echo 'include requirements.txt' >> MANIFEST.in
          fi
          python -m build # builds both wheel + sdist
        continue-on-error: false

      - name: Import GPG private key
        run: |
            echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import --pinentry-mode loopback

      - name: Sign all artifacts
        run: |
          for f in dist/*; do
            echo "Signing $f"
            gpg --batch --yes --armor \
                --pinentry-mode loopback \
                --detach-sign "$f"
          done

      - name: Publish to JFrog Artifactory
        env:
          ARTIFACTORY_URL: https://${{ secrets.JFROG_HOST_NAME }}/artifactory/api/pypi/${{ secrets.PYPI_STAGING_ARTIFACTORY }}
          ARTIFACTORY_USER: ${{ secrets.JFROG_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
        run: |
          twine upload \
            --repository-url "${ARTIFACTORY_URL}" \
            -u "${ARTIFACTORY_USER}" -p "${ARTIFACTORY_PASSWORD}" \
            dist/* 2>&1 | tee pypi-publish.log

      - name: Upload publish log to Artifactory
        run: |
         PROJECT_NAME=${GITHUB_REPOSITORY##*/}
         jf rt u "pypi-publish.log" "${{ secrets.PYPI_STAGING_ARTIFACTORY }}/logs/publish/${PROJECT_NAME}-${{ github.event.inputs.release_version }}/" --url https://${{ secrets.JFROG_HOST_NAME }}/artifactory/ --access-token=${{ secrets.JFROG_PASSWORD }}

      - name: Set CVE property in Artifactory
        # Property is set on the source distribution signature file to prevent multiple calls
        run: |
          PROJECT_NAME=${GITHUB_REPOSITORY##*/}
          jf rt sp "${{ secrets.PYPI_STAGING_ARTIFACTORY }}/${PROJECT_NAME}/${{ github.event.inputs.release_version }}/${PROJECT_NAME}-${{ github.event.inputs.release_version }}.tar.gz.asc" "fixed_cves=${{ github.event.inputs.fixed_cves }}" --url https://${{ secrets.JFROG_HOST_NAME }}/artifactory/ --access-token ${{ secrets.JFROG_PASSWORD }}

